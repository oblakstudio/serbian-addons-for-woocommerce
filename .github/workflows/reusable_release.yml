name: Reusable Plugin Release and Publish
on:
  workflow_call:
    inputs:
      dry_run:
        description: 'Whether to run a dry run'
        required: false
        default: false
        type: boolean
      node_version:
        description: 'Node version to use for building assets'
        required: false
        default: '20'
        type: string
      with_assets:
        description: 'Whether to build assets in the release'
        required: false
        default: true
        type: boolean
      plugin_slug:
        description: 'Plugin slug'
        required: true
        type: string
      composer_cmd_run:
        description: 'Composer command to run'
        required: false
        default: 'install'
        type: string
      composer_cmd_arg:
        description: 'Composer command arguments'
        required: false
        default: '--optimize-autoloader --classmap-authoritative --prefer-dist'
        type: string
      composer_php_ver:
        description: 'PHP version to use for composer'
        required: false
        default: '8.0'
        type: string
      composer_php_ext:
        description: 'PHP extensions to install'
        required: false
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.OBLAKBOT_PAT }}
      - name: Import GPG keys
        uses: crazy-max/ghaction-import-gpg@v6
        id: gpg
        with:
          gpg_private_key: ${{ secrets.OBLAKBOT_GPG_KEY }}
          passphrase: ${{ secrets.OBLAKBOT_GPG_PASS }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Setup Node.js (default)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          # If building assets, cache npm, otherwise don't
          cache: ${{ inputs.with_assets == true && 'npm' || '' }}
      - name: Cache Dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            /tmp/composer-cache
            dist
          key: cache-${{ hashFiles('**/composer.lock') }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('assets/**/*') }}
          restore-keys: |
            cache-${{ hashFiles('**/composer.lock') }}-${{ hashFiles('**/package-lock.json') }}-
            cache-${{ hashFiles('**/composer.lock') }}-

      - name: Install Composer dependencies
        uses: php-actions/composer@v6
        env:
          COMPOSER_AUTH: '{"http-basic": {"repo.packagist.com": {"username": "token", "password": "${{ secrets.PACKAGIST_TOKEN }}"}}, "github-oauth": {"github.com": "${{ secrets.COMPOSER_PAT }}"}}'
        with:
          dev: no
          quiet: yes
          args: ${{ inputs.composer_cmd_arg }}
          command: ${{ inputs.composer_cmd_run }}
          php_version: ${{ inputs.composer_php_ver }}
          php_extensions: ${{ inputs.composer_php_ext }}
      - name: Install NPM dependencies
        run: npm clean-install
        if: ${{ inputs.with_assets }}
        env:
          FA_NPM_TOKEN: ${{ secrets.FA_NPM_TOKEN }}
      - name: Install SR Config
        run: npm install -D @x-wp/semantic-release-config
        if: ${{ !inputs.with_assets }}
      - name: Build
        run: npm run build:production
        if: ${{ inputs.with_assets && steps.cache.outputs.cache-hit != 'true' }}
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: '22'
          extra_plugins: |
            @semantic-release/wordpress
        env:
          GIT_AUTHOR_NAME: ${{ steps.gpg.outputs.name}}
          GIT_AUTHOR_EMAIL: ${{ steps.gpg.outputs.email}}
          GIT_COMMITTER_NAME: ${{ steps.gpg.outputs.name}}
          GIT_COMMITTER_EMAIL: ${{ steps.gpg.outputs.email}}
          GITHUB_TOKEN: ${{ secrets.OBLAKBOT_PAT }}
      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: package
          path: |
            /tmp/wp-release/
          if-no-files-found: 'error'
          overwrite: true
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: release
    if: ${{ inputs.dry_run == false }}
    steps:
      - name: Download Package
        uses: actions/download-artifact@v4
        with:
          name: package
      - name: Get the release version
        id: pkg
        shell: bash
        run: |
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: Prepare files
        shell: bash
        run: |
          echo ${{ steps.pkg.outputs.version }}
          mkdir assets
          unzip -q assets.zip -d assets
          unzip -q package.zip
      - name: WordPress Plugin Deploy
        id: deploy
        uses: 10up/action-wordpress-plugin-deploy@2.2.2
        env:
          ASSETS_DIR: 'assets'
          BUILD_DIR: ${{ inputs.plugin_slug }}
          SVN_USERNAME: ${{ secrets.WP_ORG_SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.WP_ORG_SVN_PASSWORD }}
          VERSION: ${{ steps.pkg.outputs.version }}
        with:
          generate-zip: false
          dry-run: ${{ inputs.dry_run }}
